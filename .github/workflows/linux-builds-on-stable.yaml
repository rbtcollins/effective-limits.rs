# This is ci/actions-templates/linux-builds-template.yaml
# Do not edit this file in .github/workflows

name: Linux (stable) # skip-master skip-pr

on:
  push:         # skip-pr
    branches:   # skip-pr
      - stable  # skip-pr skip-master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - aarch64-linux-android
          - aarch64-unknown-linux-gnu     # skip-pr
          - powerpc64-unknown-linux-gnu   # skip-pr
          - x86_64-unknown-linux-musl     # skip-pr
          - i686-unknown-linux-gnu        # skip-pr skip-master
          - arm-unknown-linux-gnueabi     # skip-pr skip-master
          - arm-unknown-linux-gnueabihf   # skip-pr skip-master
          - x86_64-unknown-freebsd        # skip-pr skip-master
          - x86_64-unknown-netbsd         # skip-pr skip-master
          - powerpc-unknown-linux-gnu     # skip-pr skip-master
          - powerpc64le-unknown-linux-gnu # skip-pr skip-master
          - mips-unknown-linux-gnu        # skip-pr skip-master
          - mips64-unknown-linux-gnuabi64 # skip-pr skip-master
          - mipsel-unknown-linux-gnu      # skip-pr skip-master
          - mips64el-unknown-linux-gnuabi64 # skip-pr skip-master
          - s390x-unknown-linux-gnu       # skip-pr skip-master
          - arm-linux-androideabi         # skip-pr skip-master
          - armv7-linux-androideabi       # skip-pr skip-master
          - i686-linux-android            # skip-pr skip-master
          - x86_64-linux-android          # skip-pr skip-master
          - riscv64gc-unknown-linux-gnu   # skip-pr skip-master
        include:
          - target: x86_64-unknown-linux-gnu
            run_tests: YES
    steps:
      - uses: actions/checkout@v2
        with:
          # v2 defaults to a shallow checkout, but we need at least to the previous tag
          fetch-depth: 0
      - name: Acquire tags for the repo
        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Display the current git status
        run: |
          git status
          git describe --tags
      - name: Prep cargo dirs
        run: |
          mkdir -p ~/.cargo/{registry,git}
      - name: Set environment variables appropriately for the build
        run: |
          echo "::add-path::$HOME/.cargo/bin"
          echo "::set-env name=TARGET::${{matrix.target}}"
      - name: Skip tests
        run: |
          echo "::set-env name=SKIP_TESTS::yes"
        if: matrix.run_tests == ''
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-trimmed
      - name: Cache cargo git trees
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-gits-trimmed
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-trimmed-${{ matrix.target }}
      - name: Install Rustup
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=none --profile=minimal -y
      - name: Ensure Stable is up to date
        run: |
          if rustc +stable -vV >/dev/null 2>/dev/null; then
            rustup toolchain uninstall stable
          fi
          rustup toolchain install --profile=minimal stable
      - name: Ensure we have our goal target installed
        run: |
          rustup target install "$TARGET"
      - name: Determine which docker we need to run in
        run: |
          case "$TARGET" in
            *-linux-android*) DOCKER=android   ;; # Android uses a local docker image
            *)                DOCKER="$TARGET" ;;
          esac
          echo "::set-env name=DOCKER::$DOCKER"
      - name: Fetch the docker
        run: bash ci/fetch-rust-docker.bash "${TARGET}"
      - name: Maybe build a docker from there
        run: |
          if [ -f "ci/docker/$DOCKER/Dockerfile" ]; then
            docker build -t "$DOCKER" -f "ci/docker/${DOCKER}/Dockerfile" .
          fi
      - name: Run the build within the docker image
        run: |
          HERE=$(pwd)
          mkdir -p "${HERE}/target"
          chown -R "$(id -u)":"$(id -g)" "${HERE}/target"
          docker run \
            --entrypoint sh \
            --user "$(id -u)":"$(id -g)" \
            --volume "$(rustc --print sysroot)":/rustc-sysroot:ro \
            --volume "${HERE}":/checkout:rw \
            --volume "${HERE}"/target:/checkout/target \
            --workdir /checkout \
            --env TARGET="${TARGET}" \
            --env SKIP_TESTS="${SKIP_TESTS}" \
            --volume "${HOME}/.cargo:/cargo" \
            --env CARGO_HOME=/cargo \
            --env CARGO_TARGET_DIR=/checkout/target \
            --env LIBZ_SYS_STATIC=1 \
            --tty \
            --init \
            --rm \
            "${DOCKER}" \
            -c 'PATH="${PATH}":/rustc-sysroot/bin bash ci/run.bash'
      - name: Clear the cargo caches
        run: |
          cargo install cargo-cache --no-default-features --features ci-autoclean
          cargo-cache
